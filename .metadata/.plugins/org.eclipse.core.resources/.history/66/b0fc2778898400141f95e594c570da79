package bean;

import java.util.List;

import modelo.HibernateUtil;

import org.hibernate.Session;

import domain.Owner;
import domain.RuralHouse;
import businessLogic.ApplicationFacadeInterface;

public class OwnerBean {

	//LOGICA DE NEGOCIO
	private ApplicationFacadeInterface facadeJSF;
	
	//CONSTRUCTOR
	public OwnerBean() throws Exception {
		facadeJSF = FacadeSingleton.getInstance();
	}
	
	// LOGIN . xhtml
	//------------------------------------------------------------------------------------------
	private String nombre;
	private String password;

	public String getNombre() {
		return nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	
	}
	
	public String registrar() {
		// TODO Auto-generated method stub
		return "registrar";
	}
	
	public String consultarOferta() {
		// TODO Auto-generated method stub
		return "queryAvailability";
	}
	
	public String comprobar() {
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		session.beginTransaction();

		List<Owner> result = session.createQuery("from Owner").list();
		session.getTransaction().commit();

		for (Owner o : result) {
			if ( (o.getLogin().equals(this.nombre)) && (o.getPassword().equals(this.password)) ) {
				this.owner = o;
				return "login";
			}
		}

		HibernateUtil.getSessionFactory().close();

		return "error";
	}
	//

	
	// OWNER
	//------------------------------------------------------------------------------------------
	//Para AddOwner.xhtml
	private String name;
	private String login;
	//private String password;
	private String bankAccount;
	
	//Para RemoveOwner.xhtml
	private Owner owner;
	
	//Listas
	private List<Owner> listaOwners;
	//------------------------------------------------------------------------------------------
	
	// FUNCIONES : OWNER
	//------------------------------------------------------------------------------------------
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getLogin() {
		return login;
	}

	public void setLogin(String login) {
		this.login = login;
	}

	/*
	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}
	*/
	
	public String getBankAccount() {
		return bankAccount;
	}

	public void setBankAccount(String bankAccount) {
		this.bankAccount = bankAccount;
	}

	public Owner getOwner() {
		return owner;
	}

	public void setOwner(Owner owner) {
		this.owner = owner;
	}
	
	public String addOwner() throws Exception {
		
		Owner own = new Owner(this.name, this.login, this.password, this.bankAccount);
		
		if ( facadeJSF.addOwner(own) != null ) {
			return "ok";
		}
		
		return "error";
	}
	
	public String removeOwner() throws Exception {
		
		System.out.println("\nThis.Owner remove Owner: " + this.owner);

		List<RuralHouse> vRH  = facadeJSF.getRuralHouses(this.owner);
		
		if ( (vRH != null) && (!vRH.isEmpty()) ) {
			return "error";
		}
		else {
			facadeJSF.removeOwner(this.owner);
			return "ok";
		}
	}
	
	public String cancelar() {
		return "cancel";
	}
	//------------------------------------------------------------------------------------------
	
	// LISTAS DESPLEGABLES
	//------------------------------------------------------------------------------------------
	public List<Owner> getListaOwners() throws Exception {
		listaOwners = facadeJSF.getOwners();
		
		System.out.println("THIS.Owner: " + this.owner);
		
		for (Owner o : listaOwners) {
			System.out.println("\nOwner : '" + o.toString());
		}
		
		return listaOwners;
	}
	//------------------------------------------------------------------------------------------
}
